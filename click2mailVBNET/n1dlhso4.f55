Imports System.Xml
Imports System.IO
Imports System.Net
Imports System.Text
Imports System.Web
Module Module1

    Sub Main()

        Using sr As New StreamReader("C:\test\drakeFULL.xml")
            Dim line As String
            ' Read the stream to a string and write the string to the console.
            line = sr.ReadToEnd()
            _xmlString = line
        End Using
        _xmlString = RemoveTroublesomeCharacters(_xmlString)
        startHereBatch("Vinnie881", "ljfva09876FK")
        'startHereRest("Vinnie881", "ljfva09876FK")

    End Sub

    Private _xmlString As String = ""

    Private wr As HttpWebRequest
    Private _XMLDOC As XmlDocument = Nothing
    Private _file As String = String.Empty
    Private Const _Smainurl As String = "https://stage-batch.click2mail.com"
    Private Const _Lmainurl As String = "https://batch.click2mail.com"
    Private Const _LRestmainurl As String = "https://rest.click2mail.com"
    Private Const _sRestmainurl As String = "https://stage-rest.click2mail.com"
    Private _url As String = String.Empty
    Private _authinfo As String = String.Empty
    Private _addressListName As String = String.Empty

    Public Function RemoveTroublesomeCharacters(inString As String) As String
        If inString Is Nothing Then
            Return Nothing
        End If

        Dim newString As New StringBuilder()
        Dim ch As Char

        For i As Integer = 0 To inString.Length - 1

            ch = inString(i)
            ' remove any characters outside the valid UTF-8 range as well as all control characters
            ' except tabs and new lines
            'if ((ch < 0x00FD && ch > 0x001F) || ch == '\t' || ch == '\n' || ch == '\r')
            'if using .NET version prior to 4, use above logic
            If XmlConvert.IsXmlChar(ch) Then
                'this method is new in .NET 4
                newString.Append(ch)
            End If
        Next
        Return newString.ToString()

    End Function

    '=======================================================
    'Service provided by Telerik (www.telerik.com)
    'Conversion powered by NRefactory.
    'Twitter: @telerik
    'Facebook: facebook.com/telerik
    '=======================================================

    


    'Rest Calls Use when sending an ENTIRE document to one or more receipients'
    Private Sub startHereRest(ByVal username As String, ByVal password As String)
        Dim y As System.Collections.Specialized.NameValueCollection = New Specialized.NameValueCollection
        _XMLDOC = New XmlDocument
        _authinfo = username & ":" & password
        _file = "C:\test\test.pdf"
        _url = _sRestmainurl 'Set to Stage or Production
        Dim x As System.Collections.Specialized.NameValueCollection = New Specialized.NameValueCollection

        Console.WriteLine("******************")
        Console.WriteLine("STARTING TO UPLOAD FILE " & _file)
        x.Add("documentName", "sample Letter")
        x.Add("documentClass", "Letter 8.5 x 11")
        x.Add("documentFormat", "PDF")
        Dim results As String = createDocument(_url & "/molpro/documents/", "C:\test\test.pdf", "file", "application/pdf", x)


        Dim documentID As Integer = parseReturnxml(results, "id")


        Console.WriteLine("******************")
        Console.WriteLine(results)

        Console.WriteLine("DocumentID:" & documentID)
        Console.WriteLine("******************")
        Console.WriteLine("We are now creating the address list")


        Dim al As New List(Of addressItem)
        al.Add(New addressItem("TestFName", "TestLName", "", "5830 Oakwood dr", "Unit 2g", "", "Lisle", "IL", "60532", ""))
        al.Add(New addressItem("TestFName", "TestLName", "", "1420 Kensington Rd", "Ste 335", "", "Oak Brook", "IL", "60523", ""))
        Dim xml As String = createXMLFromAddressList(al)
        Console.WriteLine("We are now Sending the address List")
        results = createAddressList(_url & "/molpro/addressLists/", xml)
        Dim Addressid As String = parseReturnxml(results, "id")

        Dim status As String = parseReturnxml(results, "status")


        If (status <> 3) Then

            While (status <> 3)
                Console.Write("Waiting on good status of Address List Upload, current status is: " & status)
                results = createJobPost(_url & "/molpro/addressLists/" & Addressid, y, "GET")
                status = parseReturnxml(results, "status")
                System.Threading.Thread.Sleep(5000)
            End While
        End If
        Console.WriteLine("The status received from the email is 3, which means we can proceed")

        Console.WriteLine("******************")
        Console.WriteLine("results of Address Upload")
        Console.WriteLine(results)

        Console.WriteLine("******************")
        Console.WriteLine("AddressID:" & Addressid)

        Console.WriteLine("******************")
        Console.WriteLine("Check AddressList Name")

        'THis is set in the creatAddressXML
        'y.Add("addressListName", _addressListName)
        'results = createJobPost(_url & "/molpro/addressLists/checkName", y, "POST")
        'y.Clear()

        Console.WriteLine("******RESULTS OF ADDRESS LIST CHECK************")
        Console.WriteLine(results)
        Console.WriteLine("******************")



        y.Add("documentClass", "Letter 8.5 x 11")
        y.Add("layout", "Address on Separate Page")
        y.Add("productionTime", "Next Day")
        y.Add("envelope", "#10 Double Window")
        y.Add("color", "Black and White")
        y.Add("paperType", "White 24#")
        ''y.Add("printOption", "Printing One side")
        y.Add("printOption", "Printing Both sides")
        y.Add("documentId", documentID)
        y.Add("addressId", Addressid)
        results = createJobPost(_url & "/molpro/jobs", y, "POST")
        Dim jobid = parseReturnxml(results, "id")
        Console.WriteLine("******************")
        Console.WriteLine("results of Job Create")
        Console.WriteLine(results)
        Console.WriteLine("******************")
        Console.WriteLine("JobID:" & jobid)
        y.Clear()

        y.Add("billingType", "User Credit")
        results = createJobPost(_url & "/molpro/jobs/" & jobid & "/submit", y, "POST")
        'Dim jobid = parseReturnxml(results, "id")
        Console.WriteLine("******************")
        Console.WriteLine("results of Job Submit")
        Console.WriteLine(results)
        Console.WriteLine("******************")
        Console.WriteLine("JobID:" & jobid)
        Console.WriteLine("******************")
        Console.WriteLine("Check Job Status")
        y.Clear()
        results = createJobPost(_url & "/molpro/jobs/" & jobid, y, "GET")
        Console.WriteLine(results)
        Console.Read()


    End Sub
    Private Function createJobPost(url As String, nameValueCollection As Specialized.NameValueCollection, Method As String) As String
        ' Here we convert the nameValueCollection to POST data.
        ' This will only work if nameValueCollection contains some items.
        Dim parameters = New StringBuilder()
        Dim responseText As String = ""
        For Each key As String In nameValueCollection.Keys
            parameters.AppendFormat("{0}={1}&", WebUtility.UrlEncode(key), WebUtility.UrlEncode(nameValueCollection(key)))
        Next
        If (parameters.Length > 0) Then
            parameters.Length -= 1
        End If

        ' Here we create the request and write the POST data to it.
        Dim request = DirectCast(HttpWebRequest.Create(url), HttpWebRequest)
        request.Method = Method
        request.KeepAlive = True
        'request.Credentials = Net.CredentialCache.DefaultCredentials

        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))
        request.Headers("Authorization") = "Basic " + authinfo

        If (parameters.Length > 0) Then
            Using writer = New StreamWriter(request.GetRequestStream())
                writer.Write(parameters.ToString())
            End Using
        End If

        Dim response As Net.WebResponse = Nothing

        Try

            response = request.GetResponse()

            Using responseStream As IO.Stream = response.GetResponseStream()

                Using responseReader As New IO.StreamReader(responseStream)

                    responseText = responseReader.ReadToEnd()


                End Using

            End Using

        Catch exception As Net.WebException

            response = exception.Response

            If (response IsNot Nothing) Then

                Using reader As New IO.StreamReader(response.GetResponseStream())

                    responseText = reader.ReadToEnd()


                End Using

                response.Close()

            End If

        Finally

            request = Nothing

        End Try
        Return responseText
    End Function
    Private Function createXMLFromAddressList(List) As String
        Dim doc As New Xml.XmlDocument
        'create nodes
        Dim root As Xml.XmlElement = doc.CreateElement("addressList")


        Dim addressListName As Xml.XmlElement = doc.CreateElement("addressListName")
        _addressListName = Guid.NewGuid().ToString("N")
        addressListName.InnerXml = _addressListName

        root.AppendChild(addressListName)

        Dim addressMappingId As Xml.XmlElement = doc.CreateElement("addressMappingId")
        addressMappingId.InnerXml = 2
        root.AppendChild(addressMappingId)

        Dim addresses As Xml.XmlElement = doc.CreateElement("addresses")
        root.AppendChild(addresses)

        For Each a As addressItem In List
            Dim address As Xml.XmlElement = doc.CreateElement("address")
            Dim fname As Xml.XmlElement = doc.CreateElement("First_name")
            fname.InnerXml = a._First_name
            address.AppendChild(fname)
            Dim lname As Xml.XmlElement = doc.CreateElement("Last_name")
            lname.InnerXml = a._Last_name
            address.AppendChild(lname)
            Dim Organization As Xml.XmlElement = doc.CreateElement("Organization")
            Organization.InnerXml = a._Organization
            address.AppendChild(Organization)
            Dim Address1 As Xml.XmlElement = doc.CreateElement("Address1")
            Address1.InnerXml = a._Address1
            address.AppendChild(Address1)
            Dim Address2 As Xml.XmlElement = doc.CreateElement("Address2")
            Address2.InnerXml = a._Address2
            address.AppendChild(Address2)
            Dim Address3 As Xml.XmlElement = doc.CreateElement("Address3")
            Address3.InnerXml = a._Address3
            address.AppendChild(Address3)
            Dim City As Xml.XmlElement = doc.CreateElement("City")
            City.InnerXml = a._City
            address.AppendChild(City)
            Dim State As Xml.XmlElement = doc.CreateElement("State")
            State.InnerXml = a._State
            address.AppendChild(State)
            Dim zip As Xml.XmlElement = doc.CreateElement("zip")
            zip.InnerXml = a._Zip
            address.AppendChild(zip)
            Dim country As Xml.XmlElement = doc.CreateElement("Country_non-US")
            country.InnerXml = a._Country_nonUS
            address.AppendChild(country)
            addresses.AppendChild(address)
        Next

        doc.AppendChild(root)
        Dim xmlString As String
        Using stringWriter = New StringWriter()
            Using xmlTextWriter = XmlWriter.Create(stringWriter)
                doc.WriteTo(xmlTextWriter)
                xmlTextWriter.Flush()

                xmlString = stringWriter.GetStringBuilder().ToString()
            End Using
        End Using
        Return xmlString

    End Function
    Private Function createDocument( _
     ByVal uri As String, _
     ByVal filePath As String, _
     ByVal fileParameterName As String, _
     ByVal contentType As String, _
     ByVal otherParameters As Specialized.NameValueCollection) As String
        Dim responseText As String = ""
        Dim boundary As String = "---------------------------" & DateTime.Now.Ticks.ToString("x")
        Dim newLine As String = System.Environment.NewLine
        Dim boundaryBytes As Byte() = Text.Encoding.ASCII.GetBytes(newLine & "--" & boundary & newLine)
        Dim request As Net.HttpWebRequest = Net.WebRequest.Create(uri)

        request.ContentType = "multipart/form-data; boundary=" & boundary
        request.Method = "POST"
        request.KeepAlive = True
        'request.Credentials = Net.CredentialCache.DefaultCredentials

        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))
        request.Headers("Authorization") = "Basic " + authinfo

        Using requestStream As IO.Stream = request.GetRequestStream()

            Dim formDataTemplate As String = "Content-Disposition: form-data; name=""{0}""{1}Content-Type: text/plain; charset=UTF-8{1}{1}{2}"

            For Each key As String In otherParameters.Keys

                requestStream.Write(boundaryBytes, 0, boundaryBytes.Length)
                Dim formItem As String = String.Format(formDataTemplate, key, newLine, otherParameters(key))
                Dim formItemBytes As Byte() = Text.Encoding.UTF8.GetBytes(formItem)
                requestStream.Write(formItemBytes, 0, formItemBytes.Length)

            Next key

            requestStream.Write(boundaryBytes, 0, boundaryBytes.Length)

            Dim headerTemplate As String = "Content-Disposition: form-data; name=""{0}""; filename=""{1}""{2}Content-Type: {3}{2}Content-Transfer-Encoding: binary{2}{2}"
            Dim header As String = String.Format(headerTemplate, fileParameterName, filePath, newLine, contentType)
            Dim headerBytes As Byte() = Text.Encoding.UTF8.GetBytes(header)
            requestStream.Write(headerBytes, 0, headerBytes.Length)

            Using fileStream As New IO.FileStream(filePath, IO.FileMode.Open, IO.FileAccess.Read)

                Dim buffer(4096) As Byte
                Dim bytesRead As Int32 = fileStream.Read(buffer, 0, buffer.Length)

                Do While (bytesRead > 0)

                    requestStream.Write(buffer, 0, bytesRead)
                    bytesRead = fileStream.Read(buffer, 0, buffer.Length)

                Loop

            End Using

            Dim trailer As Byte() = Text.Encoding.ASCII.GetBytes(newLine & "--" + boundary + "--" & newLine)
            requestStream.Write(trailer, 0, trailer.Length)

        End Using

        Dim response As Net.WebResponse = Nothing

        Try

            response = request.GetResponse()

            Using responseStream As IO.Stream = response.GetResponseStream()

                Using responseReader As New IO.StreamReader(responseStream)

                    responseText = responseReader.ReadToEnd()


                End Using

            End Using

        Catch exception As Net.WebException

            response = exception.Response

            If (response IsNot Nothing) Then

                Using reader As New IO.StreamReader(response.GetResponseStream())

                    responseText = reader.ReadToEnd()


                End Using

                response.Close()

            End If

        Finally

            request = Nothing

        End Try
        Return responseText

    End Function
    Public Function GenerateStreamFromString(s As String) As Stream
        Dim stream As New MemoryStream()
        Dim writer As New StreamWriter(stream)
        writer.Write(s)
        writer.Flush()
        stream.Position = 0
        Return stream
    End Function
    Private Function createAddressList( _
    ByVal uri As String, _
    xml As String) As String
        Dim responseText As String = ""
        Dim request As Net.HttpWebRequest = Net.WebRequest.Create(uri)

        request.ContentType = "application/xml"
        request.Method = "POST"
        request.KeepAlive = True
        'request.Credentials = Net.CredentialCache.DefaultCredentials

        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))
        request.Headers("Authorization") = "Basic " + authinfo

        Using requestStream As IO.Stream = request.GetRequestStream()

            Using fileStream As Stream = GenerateStreamFromString(xml)

                Dim buffer(4096) As Byte
                Dim bytesRead As Int32 = fileStream.Read(buffer, 0, buffer.Length)

                Do While (bytesRead > 0)

                    requestStream.Write(buffer, 0, bytesRead)
                    bytesRead = fileStream.Read(buffer, 0, buffer.Length)

                Loop

            End Using

            

        End Using

        Dim response As Net.WebResponse = Nothing

        Try

            response = request.GetResponse()

            Using responseStream As IO.Stream = response.GetResponseStream()

                Using responseReader As New IO.StreamReader(responseStream)

                    responseText = responseReader.ReadToEnd()


                End Using

            End Using

        Catch exception As Net.WebException

            response = exception.Response

            If (response IsNot Nothing) Then

                Using reader As New IO.StreamReader(response.GetResponseStream())

                    responseText = reader.ReadToEnd()


                End Using

                response.Close()

            End If

        Finally

            request = Nothing

        End Try
        Return responseText

    End Function

  
    'BATCH CALLS, use when 1 PDF document contains multiple Jobs'
    Private Sub startHereBatch(ByVal username As String, ByVal password As String)
        'Assign your file
        _XMLDOC = New XmlDocument

        _file = "C:\test\drake document.pdf"
        _url = _Smainurl 'Set to Stage or Production

        'Populate your xml
        Dim sb As String

        sb = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>" &
        "<batch>" &
        "    <username>" & username & "</username>" &
        "    <password>" & password & "</password>" &
        "    <filename>pdf6552108975977616798.pdf</filename>" &
        "    <appSignature>MyTest App</appSignature>" &
        "    <job>" &
        "        <startingPage>1</startingPage>" &
        "        <endingPage>6</endingPage>" &
        "        <printProductionOptions>" &
        "            <documentClass>Letter 8.5 x 11</documentClass>" &
        "            <layout>Address on First Page</layout>" &
        "            <productionTime>Next Day</productionTime>" &
        "            <envelope>#10 Double Window</envelope>" &
        "            <color>Full Color</color>" &
        "            <paperType>White 24#</paperType>" &
        "            <printOption>Printing One side</printOption>" &
        "            <mailClass>First Class</mailClass>" &
        "        </printProductionOptions>" &
        "        <recipients>" &
        "            <address>" &
        "                <name>Click2mail Test</name>" &
        "                <organization />" &
        "                <address1>5830 OakWood Dr 2g</address1>" &
        "                <address2 />" &
        "                <address3 />" &
        "                <city>Oak Brook</city>" &
        "                <state>IL</state>" &
        "                <postalCode>60523</postalCode>" &
        "                <country>United States</country>" &
        "            </address>" &
        "        </recipients>" &
        "    </job>" &
        " <job>" &
        "        <startingPage>7</startingPage>" &
        "        <endingPage>10</endingPage>" &
        "        <printProductionOptions>" &
        "            <documentClass>Letter 8.5 x 11</documentClass>" &
        "            <layout>Address on First Page</layout>" &
        "            <productionTime>Next Day</productionTime>" &
        "            <envelope>#10 Double Window</envelope>" &
        "            <color>Full Color</color>" &
        "            <paperType>White 24#</paperType>" &
        "            <printOption>Printing One side</printOption>" &
        "            <mailClass>First Class</mailClass>" &
        "        </printProductionOptions>" &
        "        <recipients>" &
        "            <address>" &
        "                <name>Click2mail Test</name>" &
        "                <organization />" &
        "                <address1>1420 Kensington Rd</address1>" &
        "                <address2>ste 310</address2>" &
        "                <address3 />" &
        "                <city>Oak Brook</city>" &
        "                <state>IL</state>" &
        "                <postalCode>60523</postalCode>" &
        "                <country>United States</country>" &
        "            </address>" &
        "        </recipients>" &
        "    </job>" &
        "</batch>"


        _XMLDOC.LoadXml(_xmlString)
        '_XMLDOC.LoadXml(sb)


        _authinfo = username & ":" & password

        Dim batchid As Integer = createbatch()
        uploadBatchxml(batchid)
        uploadBatchPDF(batchid)
        submitbatch(batchid)
        Console.WriteLine()
        Console.WriteLine("Press Enter to See Batch Status for " & batchid)
        Console.ReadLine()
        Dim s As String = ""
        Console.WriteLine("***********************CURRENT STATUS********************************")
        Console.WriteLine()
        getbatchstatus(batchid, s)
        Console.ReadLine()



    End Sub
    Private Function getbatchstatus(ByVal batchid As Integer, ByRef results As String) As String
        Dim strURI As String = String.Empty
        strURI = _url & "/v1/batches/" & batchid
        Console.WriteLine(strURI)
        Dim request As HttpWebRequest = CType(WebRequest.Create(strURI), HttpWebRequest)
        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))
        request.Headers("Authorization") = "Basic " + authinfo
        request.Method = System.Net.WebRequestMethods.Http.Get
        Dim result As String
        Try
            Using response As WebResponse = request.GetResponse()
                Using reader As New StreamReader(response.GetResponseStream())
                    result = reader.ReadToEnd()

                End Using
            End Using
            results = result
            Console.Write(result)

            Return parseReturnxml(result, "hasErrors")
        Catch ex As Exception
            Console.Write(ex.Message)
        End Try
        Return ""
    End Function
    Private Function createbatch() As Integer
        Dim request As HttpWebRequest
        Dim response As HttpWebResponse = Nothing
        Dim reader As StreamReader
        Dim address As Uri
        Dim data As StringBuilder = Nothing
        Dim byteData() As Byte = Nothing
        Dim postStream As Stream = Nothing

        address = New Uri(_url & "/v1/batches")

        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))

        ' Create the web request  
        request = DirectCast(WebRequest.Create(address), HttpWebRequest)
        request.Headers("Authorization") = "Basic " + authinfo
        request.Method = "POST"
        request.ContentType = "text/plain"
        Try
            response = request.GetResponse()
        Catch wex As WebException
            ' This exception will be raised if the server didn't return 200 - OK  
            ' Try to retrieve more information about the network error  
            If Not wex.Response Is Nothing Then
                Dim errorResponse As HttpWebResponse = Nothing
                Try
                    errorResponse = DirectCast(wex.Response, HttpWebResponse)
                    Console.WriteLine( _
                      "The server returned '{0}' with the status code {1} ({2:d}).", _
                      errorResponse.StatusDescription, errorResponse.StatusCode, _
                      errorResponse.StatusCode)
                Finally
                    If Not errorResponse Is Nothing Then errorResponse.Close()
                End Try
            End If
        Finally
            If Not postStream Is Nothing Then postStream.Close()
        End Try
        '
        Try

            reader = New StreamReader(response.GetResponseStream())

            ' Console application output  
            Dim s As String = reader.ReadToEnd()
            reader.Close()
            Console.Write(s)
            Return parseReturnxml(s, "id")
            '    c2m.StatusPick.jobStatus = parsexml(s, "status")
            'MsgBox(s)

        Finally
            ' If c2m.jobid = 0 Then
            '            c2m.StatusPick.jobStatus = 99
            'End If
            'If Not response Is Nothing Then response.Close()
        End Try
    End Function
    Private Sub submitbatch(batchid As Integer)
        Dim request As HttpWebRequest
        Dim response As HttpWebResponse = Nothing
        Dim reader As StreamReader
        Dim address As Uri

        Dim postStream As Stream = Nothing

        address = New Uri(_url & "/v1/batches/" & batchid)

        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))

        ' Create the web request  
        request = DirectCast(WebRequest.Create(address), HttpWebRequest)
        request.Headers("Authorization") = "Basic " + authinfo
        request.Method = "POST"

        Try
            response = request.GetResponse()
        Catch wex As WebException
            ' This exception will be raised if the server didn't return 200 - OK  
            ' Try to retrieve more information about the network error  
            If Not wex.Response Is Nothing Then
                Dim errorResponse As HttpWebResponse = Nothing
                Try
                    errorResponse = DirectCast(wex.Response, HttpWebResponse)
                    Console.WriteLine( _
                      "The server returned '{0}' with the status code {1} ({2:d}).", _
                      errorResponse.StatusDescription, errorResponse.StatusCode, _
                      errorResponse.StatusCode)
                Finally
                    If Not errorResponse Is Nothing Then errorResponse.Close()
                End Try
            End If
        Finally
            If Not postStream Is Nothing Then postStream.Close()
        End Try
        '
        Try

            reader = New StreamReader(response.GetResponseStream())
        Finally
        End Try

    End Sub
    Private Sub uploadBatchxml(batchid As Integer)

        Dim strURI As String = String.Empty
        strURI = _url & "/v1/batches/" & batchid
        Dim request As HttpWebRequest = CType(WebRequest.Create(strURI), HttpWebRequest)
        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))
        request.Headers("Authorization") = "Basic " + authinfo
        request.Accept = "application/xml"
        request.Method = "PUT"
        Using ms As New MemoryStream()
            _XMLDOC.Save(ms)
            request.ContentLength = ms.Length
            ms.WriteTo(request.GetRequestStream())
        End Using
        Dim result As String

        Using response As WebResponse = request.GetResponse()
            Using reader As New StreamReader(response.GetResponseStream())
                result = reader.ReadToEnd()
            End Using
        End Using

        Console.WriteLine(result)
    End Sub
    Private Sub uploadBatchPDF(batchid As Integer)

        Dim client As New WebClient

        Dim strURI As String = String.Empty
        strURI = _url & "/v1/batches/" & batchid
        Dim authinfo As String
        authinfo = Convert.ToBase64String(Encoding.Default.GetBytes(_authinfo))
        client.Headers("Authorization") = "Basic " + authinfo
        client.Headers.Add("Content-Type", "application/pdf")
        'Dim sentXml As Byte() = System.Text.Encoding.ASCII.GetBytes(_XMLDOC.OuterXml)

        Dim fInfo As New FileInfo(_file)

        Dim numBytes As Long = fInfo.Length

        Dim fStream As New FileStream(_file, FileMode.Open, FileAccess.Read)

        Dim br As New BinaryReader(fStream)

        Dim data As Byte() = br.ReadBytes(CInt(numBytes))

        ' Show the number of bytes in the array.


        br.Close()

        fStream.Close()




        Dim response As Byte() = client.UploadData(strURI, "PUT", data)

        Console.WriteLine(System.Text.Encoding.Default.GetString(response))


        'Console.WriteLine(response.ToString())
    End Sub


    'TOOLS
    Private Function parseReturnxml(strxml As String, lookfor As String) As String

        Dim s As String = 99

        ' Create an XmlReader
        Using reader As XmlReader = XmlReader.Create(New StringReader(strxml))

            '            reader.ReadToFollowing(lookfor)
            'reader.MoveToFirstAttribute()
            'Dim genre As String = reader.Value
            'output.AppendLine("The genre value: " + genre)

            reader.ReadToFollowing(lookfor)
            s = reader.ReadElementContentAsString()
            reader.Close()



        End Using

        Return s



    End Function
    Private Class addressItem
        Public _First_name As String = ""
        Public _Last_name As String = ""
        Public _Organization As String = ""
        Public _Address1 As String = ""
        Public _Address2 As String = ""
        Public _Address3 As String = ""
        Public _City As String = ""
        Public _State As String = ""
        Public _Zip As String = ""
        Public _Country_nonUS As String = ""
        Public Sub New(ByVal fname As String, lname As String, org As String, address1 As String, address2 As String, address3 As String, city As String, state As String, zip As String, country As String)
            _First_name = fname
            _Last_name = lname
            _Organization = org
            _Address1 = address1
            _Address2 = address2
            _Address3 = address3
            _City = city
            _State = state
            _Zip = zip
            _Country_nonUS = country
        End Sub


    End Class

End Module
